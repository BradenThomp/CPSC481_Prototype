@page "/ItemInfo/{id}"
@inject LibraryItemStore LibraryItemStore
@inject UserStore UserStore
@inject LoginService LoginService;
@inject IToastService toastService

<PageTitle>ItemInfo</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-3">
            <img class="img-fluid" src=@Item.ImageSource />
        </div>
        <div class="col-md-6">
            <div class="p-1 mt-3">
                <h1 class="display-5">@Item.Title</h1>
                <h3 class="h3">@Item.Author</h3>
                <h6 class="h6">@Item.Length, @Item.Format</h6>
                <h6 class="h6">@Item.Publisher - @Item.PublicationDate</h6>
            </div> 
            <div class="border p-3">
                <h2>Summary</h2>
                <p>@Item.Summary</p>
            </div>
            <div class="p-1 col-md-12 d-flex align-items-center">
                <h5 class="h5">Genres:</h5>
                @foreach(var genre in Item.Genres)
                {
                    <span class="badge rounded-pill bg-secondary ms-1">@genre</span>
                }
            </div>
        </div>
        <div class="col-lg-3">
            <div class="border p-3 mt-3">
                @if(Item.CopiesAvailable == 1)
                {
                    <h5 class="h5">1 copy available</h5>
                }
                else {
                    <h5 class="h5">@Item.CopiesAvailable copies available</h5>
                }
                @if (Item.DeweyDecimal >= 0)
                {
                    <h6 class="h6">Location: @Item.DeweyDecimal</h6>
                }
                else
                {
                    <h6 class="h6">Location: @(Item.ItemType == ItemType.Music ? "Music" : "Movies")</h6>
                }
                <Map Scale="0.4" Item="Item"></Map>
                <br/>
                <a href="" class="h6" @onclick="@ShowModal" @onclick:preventDefault>Click to Expand Map</a>
                <hr />
                @if (User == null)
                {
                    <button class="btn button-26 m-2"  @onclick="@(()=> toastService.ShowError("Please login first"))">Hold</button>
                }

                else if (HoldStatus(Item))
                {
                    <a href="#" class="btn button-26 m-2" role="button" @onclick="(() => unholdItem(Item))" @onclick:preventDefault>Remove From Hold</a>
                }
                else if (!HoldStatus(Item))
                {
                    <a href="#" class="btn button-26 m-2" role="button" @onclick="(() => holdItem(Item))" @onclick:preventDefault>Hold</a>
                }
                @if (User == null)
                {
                    <button class="btn button-26 m-2" @onclick="@(()=> toastService.ShowError("Please login first"))">Add to Wishlist</button>
                }
                else if (WishlistStatus(Item))
                {
                    <a href="#" class="btn button-26 m-2" role="button" @onclick="(() => unwishlistItem(Item))" @onclick:preventDefault>Remove From Wishlist</a>
                }
                else if (User == null || !WishlistStatus(Item))
                {
                    <a href="#" class="btn button-26 m-2" role="button" @onclick="(() => addToWishlist(Item))" @onclick:preventDefault>Add To Wishlist</a>
                }
            </div>
        </div>
    </div>
    <hr class="mt-4 mb-4"/>
    <h1 class="display-5">Similar Items</h1>
    <HorizontalScroll Items="@SimilarItems"></HorizontalScroll>
</div>

<Modal @ref="_modalRef">
    <ModalContent Centered Size="Blazorise.ModalSize.ExtraLarge">
        <ModalBody>
            <MapLayout Item="Item"></MapLayout>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public string Id { get; set; }

    public LibraryItem Item { get; set; }
    public User User { get; set; }

    public IEnumerable<LibraryItem> SimilarItems { get; set; }

    private Modal _modalRef;

    protected override void OnParametersSet()
    {
        Item = LibraryItemStore.Get(Int32.Parse(Id));
        SimilarItems = LibraryItemStore.GetSimilarItems(Item);
        User = LoginService.CurrentUser;
    }

    private Task ShowModal() 
    {
        return _modalRef.Show();
    }

    private Task HideModal() 
    {
        return _modalRef.Hide();
    }
    void removeItemFromWishlist(LibraryItem item)
    {
        bool a = UserStore.removeFromWishlist(item, User);
        toastService.ShowSuccess("Removed " + item.Title + " from wishlist.");
    }

    void holdItem(LibraryItem item)
    {
        UserStore.addToHold(item, User);
        toastService.ShowSuccess("Placed " + item.Title + " on hold. Please visit the library with two business days to pick up your item.");
    }

    void unholdItem(LibraryItem item)
    {
        UserStore.removeFromHold(item, User);
        toastService.ShowSuccess("Removed " + item.Title + " from on hold.");
    }

    void unwishlistItem(LibraryItem item)
    {
        UserStore.removeFromWishlist(item, User);
        toastService.ShowSuccess("Removed " + item.Title + " from wishlist.");
    }

    void removeItemFromHold(LibraryItem item)
    {
        UserStore.removeFromHold(item, User);
    }
   

    public bool HoldStatus(LibraryItem item)
    {
        if (UserStore.isOnHold(item, User))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool WishlistStatus(LibraryItem item)
    {
        if (UserStore.isInWishlist(item, User))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void addToWishlist(LibraryItem item)
    {
        UserStore.addToWishlist(item, User);
        toastService.ShowSuccess("Added " + item.Title + " to the wishlist.");
    }
}

<style>
    .button-26 {
        background: #00303f;
        border: 1px solid #00303f;
        border-radius: 6px;
        box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
        box-sizing: border-box;
        color: white;
        cursor: pointer;
        display: inline-block;
        font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
        font-size: 16px;
        font-weight: 500;
        line-height: 16px;
        min-height: 40px;
        outline: 0;
        padding: 12px 14px;
        text-align: center;
        text-rendering: geometricprecision;
        text-transform: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
    }

        .button-26:hover,
        .button-26:active {
            background-color: initial;
            background-position: 0 0;
            color: #00303f;
        }

        .button-26:active {
            opacity: .5;
        }
</style>
@page "/searchresults/{showSearch}"
@inherits LayoutComponentBase
@inject LibraryItemStore LibraryItemStore
@inject NavigationManager UriHelper
@inject UserStore UserStore
@inject LoginService LoginService;
@inject IToastService toastService
@inject IJSRuntime JsRuntime;

<PageTitle>Search Results Page</PageTitle>
<!-- Side navigation -->

<div class="row">
    <div style="@sidebarWidth" class="filters">
        <h3><a href="" @onclick=@(() => showAll()) @onclick:preventDefault><u>Reset Filters</u></a></h3>
        <br />
        <a>Media Type:</a>
        <div class="indent">
            @if (filter == "Movie")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setFormatFilter(ItemType.Movie)) @onclick:preventDefault>Movie (@movieCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setFormatFilter(ItemType.Movie)) @onclick:preventDefault>Movie (@movieCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Book")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setFormatFilter(ItemType.Book)) @onclick:preventDefault>Book (@bookCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setFormatFilter(ItemType.Book)) @onclick:preventDefault>Book (@bookCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Music")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setFormatFilter(ItemType.Music)) @onclick:preventDefault>Music (@musicCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setFormatFilter(ItemType.Music)) @onclick:preventDefault>Music (@musicCount)</a>
            }
        </div>
        <hr style="width:50%;text-align:left;margin-left:15px">
        <a>Classification:</a>
        <div class="indent">
            @if (filter == "Fiction")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Fiction")) @onclick:preventDefault>Fiction (@fictionCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Fiction")) @onclick:preventDefault>Fiction (@fictionCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Non-fiction")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Non-fiction")) @onclick:preventDefault>Non-fiction (@nonfictionCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Non-fiction")) @onclick:preventDefault>Non-fiction (@nonfictionCount)</a>
            }
        </div>
        <hr style="width:50%;text-align:left;margin-left:15px">
        <a>Genre:</a>
        <div class="indent">
            @if (filter == "Action")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Action")) @onclick:preventDefault>Action (@actionCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Action")) @onclick:preventDefault>Action (@actionCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Adventure")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Adventure")) @onclick:preventDefault>Adventure (@adventureCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Adventure")) @onclick:preventDefault>Adventure (@adventureCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Fantasy")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Fantasy")) @onclick:preventDefault>Fantasy (@fantasyCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Fantasy")) @onclick:preventDefault>Fantasy (@fantasyCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Graphic Novel")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Graphic Novel")) @onclick:preventDefault>Graphic Novel (@graphicNovelCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Graphic Novel")) @onclick:preventDefault>Graphic Novel (@graphicNovelCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Horror")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Horror")) @onclick:preventDefault>Horror (@horrorCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Horror")) @onclick:preventDefault>Horror (@horrorCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Kids")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Kids")) @onclick:preventDefault>Children (@childrenCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Kids")) @onclick:preventDefault>Children (@childrenCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Mystery")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Mystery")) @onclick:preventDefault>Mystery (@mysteryCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Mystery")) @onclick:preventDefault>Mystery (@mysteryCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Politics")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Politics")) @onclick:preventDefault>Politics (@politicsCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Politics")) @onclick:preventDefault>Politics (@politicsCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Religion")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Religion")) @onclick:preventDefault>Religion (@religionCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Religion")) @onclick:preventDefault>Religion (@religionCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Romance")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Romance")) @onclick:preventDefault>Romance (@romanceCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Romance")) @onclick:preventDefault>Romance (@romanceCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Science Fiction")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Science Fiction")) @onclick:preventDefault>Sci-Fi (@scifiCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Science Fiction")) @onclick:preventDefault>Sci-Fi (@scifiCount)</a>
            }
        </div>
        <div class="indent">
            @if (filter == "Teen")
            {
                <a href="" style="font-weight: bold;" @onclick=@(() => setGenreFilter("Teen")) @onclick:preventDefault>Teen (@teenCount)</a>
            }
            else
            {
                <a href="" @onclick=@(() => setGenreFilter("Teen")) @onclick:preventDefault>Teen (@teenCount)</a>
            }
        </div>
    </div>
</div>
<!-- Page content -->
@if (results.Count > 0)
{
    int i = 0;
    <div style="@main">
        &nbsp;
        <div class="container">
            <div class="row mb-4">
                <div class="col-6">
                    <h2>@results.Count results for @showsearch found</h2>
                </div>
                <div class="col-6 d-flex justify-content-end">
                    <div class="dropdown">
                        <label class="btn-label">Sort By:</label>
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Sort By:
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                            <button class="dropdown-item" @onclick=@(() => sortBy("tAsc")) type="button">Title(Ascending)</button>
                            <button class="dropdown-item" @onclick=@(() => sortBy("tDsc")) type="button">Title(Descending)</button>
                            <button class="dropdown-item" @onclick=@(() => sortBy("aAsc")) type="button">Author(Ascending)</button>
                            <button class="dropdown-item" @onclick=@(() => sortBy("aDsc")) type="button">Author(Descending)</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @for (int index = CurrentPage * 10; index < renderTo; index++)
                    {
                        var item = results[index];
                        if (!setVisible(item))
                            continue;

                        <div class="card mb-3 card-style" style="width: 101%;">
                            <div class="row no-gutters">
                                <div class="col-md-2">
                                    <div class="img-responsive center-block d-block mx-auto">
                                        <img src="@item.ImageSource" class="card-img" alt="...">
                                    </div>
                                </div>
                                <div class="col-md-10">
                                    <div class="card-body">
                                        <h2 class="display-5">@item.Title</h2>
                                        <h3 class="h3">@item.Author</h3>
                                        <h6 class="h6">@item.Length, @item.Format</h6>
                                        <h6 class="h6"> @item.Publisher - @item.PublicationDate</h6>
                                        &nbsp;
                                        <p>
                                            <a class="btn btn-outline-dark ms-2" data-toggle="collapse" href="#collapseExample_@i" role="button" aria-expanded="false" aria-controls="#collapseExample">
                                                + Expand
                                            </a>
                                        </p>
                                        <div class="collapse" id="collapseExample_@i">
                                            <div class="card card-body card-style">
                                                @item.Summary
                                            </div>
                                        </div>
                                        <p class="card-text"><small class="text-muted">@item.CopiesAvailable Copies Available</small></p>
                                        <div style="text-align: left;">
                                            @*                                            <a href="#" class="btn btn-secondary" style="background-color: #6b9080" role="button">Hold</a>
                                                <a href="#" class="btn btn-secondary" style="background-color: #6b9080" role="button">Wishlist</a>*@
                                            @if (User == null)
                                            {
                                                <button @onclick="@(()=> toastService.ShowError("Please login first"))" class="btn button-26 ms-2" >Hold</button>
                                            }

                                            else if (HoldStatus(item))
                                            {
                                                <a href="#" class="btn button-26 ms-2"  role="button" @onclick="(() => removeItemFromHold(item))" @onclick:preventDefault>Remove From Hold</a>
                                            }
                                            else if (!HoldStatus(item) && item.CopiesAvailable <= 0)
                                                                    {
                                                <button href="#" disabled="true" class="btn button-26 ms-2" role="button" @onclick="(() => holdItem(item))" @onclick:preventDefault>Hold</button>
                                            }
                                            else if (!HoldStatus(item))
                                            {
                                                <a href="#" class="btn button-26 ms-2"  role="button" @onclick="(() => holdItem(item))" @onclick:preventDefault>Hold</a>
                                            }
                                            @if (User == null)
                                            {
                                                <button @onclick="@(()=> toastService.ShowError("Please login first"))" class="btn button-26 ms-2" >Add to Wishlist</button>
                                            }
                                            else if (WishlistStatus(item))
                                            {
                                                <a href="#" class="btn button-26 ms-2"  role="button" @onclick="(() => removeItemFromWishlist(item))" @onclick:preventDefault>Remove From Wishlist</a>
                                            }
                                            else if (User == null || !WishlistStatus(item))
                                            {
                                                <a href="#" class="btn button-26 ms-2" role="button" @onclick="(() => addToWishlist(item))" @onclick:preventDefault>Add To Wishlist</a>
                                            }
                                            <a href="iteminfo/@item.Id" class="btn button-26 ms-2" role="button">Info</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        i++;
                    }
                </div>
            </div>
        </div>
        <div class="container mb-4">
            <div class="row">
                    <div class="col-4">
                    @if (CurrentPage > 0)
                    {
                        <button class="btn button-24 ms-3" @onclick="previousPage">Previous</button>
                    }
                    else
                    {
                        <button disabled="true" class="btn button-24 ms-3" @onclick="previousPage">Previous</button>
                    }
                    </div>
                    <div class="col-4 d-flex justify-content-center">
                        <p>Page @(CurrentPage + 1) of @MaxPage</p>
                    </div>
                    <div class="col-4 d-flex justify-content-end">
                    @if (renderTo < results.Count())
                    {
                        <button class="btn button-24 ms-3" @onclick="nextPage">Next</button>
                    }
                    else
                    {
                        <button disabled="true" class="btn button-24 ms-3" @onclick="nextPage">Next</button>
                    }
                    </div>
                </div>
            </div>
    </div>
}


<style>
    .searchHeader {
        padding-right: 50px;
    }

    .card-img {
        width: 200px;
        height: 300px;
        object-fit: fill;
        padding-top: 15px;
        padding-left: 10px;
    }
    /*Sidebar Text indentation*/
    .indent {
        text-indent: 25px
    }
    /*Side bar settings*/
    .filters {
        width: 200px; /* Set the width of the sidebar */
        position: fixed;
        max-height: calc(100vh - 7rem);
        overflow-y: auto;
        z-index: 1; /* Stay on top */
        top: 100px; /* Stay at the top */
        left: 0px;
        background-color: transparent;
        overflow-x: hidden; /* Disable horizontal scroll */
        padding-top: 20px;
        border-right: 1px groove;
        transition: 0.5s;
    }
        /*Filter X button*/
        .filters .closebtn {
            position: absolute;
            top: 0;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }
    /*Filter enable button*/
    .openbtn {
        font-size: 20px;
        cursor: pointer;
        background-color: #f6fff8;
        color: black;
        padding-left: 26px;
        border: none;
    }
    /* The navigation menu links */
    .filters a {
        padding: 6px 8px 6px 16px;
        text-decoration: none;
        font-size: 16px;
        color: black;
        display: block;
    }
        /* When you mouse over the navigation links, change their color */
        .filters a:hover {
            color: darkgreen;
        }

    #main {
        transition: margin-left .5s; /* If you want a transition effect */
        padding: 20px;
    }

    /* Style page content */
    .main {
        margin-left: 200px; /* Same as the width of the sidebar */
        padding: 0px 10px;
    }

    .card-style {
        background-color: #eaf4f4
    }
</style>

@code {
    string filter;
    int width = 0;
    string sidebarWidth => $"width: 250px;";
    string main => $"margin-left: {width}px;";
    void OpenNav() => width = 250;
    void CloseNav() => width = 0;
    [Parameter]
    public string showsearch { get; set; }
    public LibraryItem Item { get; set; }
    public User User { get; set; }
    private List<LibraryItem> results;
    private int CurrentPage;
    private int MaxPage;

    private int renderTo => (CurrentPage + 1) * 10 < results.Count ? (CurrentPage + 1) * 10 : results.Count;

    int result, musicCount, movieCount, bookCount, fictionCount, nonfictionCount, fantasyCount, actionCount,
        adventureCount, childrenCount, teenCount, scifiCount, romanceCount, mysteryCount, horrorCount, graphicNovelCount, politicsCount, religionCount = 0;

    void resetCount()
    {
        result = 0;
        musicCount = 0;
        movieCount = 0;
        bookCount = 0;
        fictionCount = 0;
        nonfictionCount = 0;
        fantasyCount = 0;
        actionCount = 0;
        actionCount = 0;
        adventureCount = 0;
        childrenCount = 0;
        teenCount = 0;
        scifiCount = 0;
        romanceCount = 0;
        mysteryCount = 0;
        horrorCount = 0;
        graphicNovelCount = 0;
        politicsCount = 0;
        religionCount = 0;
    }

    private async void nextPage()
    {
        CurrentPage++;
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private async void previousPage()
    {
        CurrentPage--;
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private void showAll()
    {
        filter = "";
        results = LibraryItemStore.Search(showsearch);
        foreach (var item in results)
        {
            setVisible(item);
        }
        CurrentPage = 0;
        double ceil = Math.Ceiling(results.Count() / 10.0);
        MaxPage = Convert.ToInt32(ceil);
    }

    private void setFormatFilter(ItemType type)
    {
        if (type == ItemType.Movie)
        {
            filter = "Movie";
        }
        else if (type == ItemType.Book)
        {
            filter = "Book";
        }
        else if (type == ItemType.Music)
        {
            filter = "Music";
        }
        results = LibraryItemStore.Search(showsearch);
        List<LibraryItem> internalResults = new List<LibraryItem>();
        foreach (var item in results)
        {
            if (setVisible(item))
            {
                internalResults.Add(item);
            }
        }
        results = internalResults;
        CurrentPage = 0;
        double ceil = Math.Ceiling(results.Count() / 10.0);
        MaxPage = Convert.ToInt32(ceil);
    }

    private void setGenreFilter(string arg)
    {
        if (arg == "Fiction")
        {
            filter = "Fiction";
        }
        else if (arg == "Non-fiction")
        {
            filter = "Non-fiction";
        }
        else if (arg == "Fantasy")
        {
            filter = "Fantasy";
        }
        else if (arg == "Action")
        {
            filter = "Action";
        }
        else if (arg == "Adventure")
        {
            filter = "Adventure";
        }
        else if (arg == "Kids")
        {
            filter = "Kids";
        }
        else if (arg == "Teen")
        {
            filter = "Teen";
        }
        else if (arg == "Science Fiction")
        {
            filter = "Science Fiction";
        }
        else if (arg == "Romance")
        {
            filter = "Romance";
        }
        else if (arg == "Mystery")
        {
            filter = "Mystery";
        }
        else if (arg == "Horror")
        {
            filter = "Horror";
        }
        else if (arg == "Graphic Novel")
        {
            filter = "Graphic Novel";
        }
        else if (arg == "Politics")
        {
            filter = "Politics";
        }
        else if (arg == "Religion")
        {
            filter = "Religion";
        }
        results = LibraryItemStore.Search(showsearch);
        List<LibraryItem> internalResults = new List<LibraryItem>();
        foreach (var item in results)
        {
            if (setVisible(item))
            {
                internalResults.Add(item);
            }
        }
        results = internalResults;
        CurrentPage = 0;
        double ceil = Math.Ceiling(results.Count() / 10.0);
        MaxPage = Convert.ToInt32(ceil);
    }

    private void sortBy(string arg)
    {
        CurrentPage = 0;
        if (arg == "tAsc")
        {
            results = results.OrderBy(x => x.Title).ToList();
        }
        else if (arg == "tDsc")
        {
            results = results.OrderByDescending(x => x.Title).ToList();
        }
        else if (arg == "aAsc")
        {
            results = results.OrderBy(x => x.Author).ToList();
        }
        else if (arg == "aDsc")
        {
            results = results.OrderByDescending(x => x.Author).ToList();
        }
    }

    protected override async void OnParametersSet()
    {
        CurrentPage = 0;
        resetCount();
        results = LibraryItemStore.Search(showsearch);
        double ceil = Math.Ceiling(results.Count() / 10.0);
        MaxPage = Convert.ToInt32(ceil);
        filterCount(results);
        User = LoginService.CurrentUser;
    }

    private bool setVisible(LibraryItem item)
    {
        if (string.IsNullOrEmpty(filter))
            return true;

        if (filter == "Movie" && item.ItemType == ItemType.Movie)
            return true;

        if (filter == "Book" && item.ItemType == ItemType.Book)
            return true;

        if (filter == "Music" && item.ItemType == ItemType.Music)
            return true;

        foreach (var genre in item.Genres)
        {
            if (genre.StartsWith(filter))
            {
                return true;
            }
        }
        return false;
    }

    private void filterCount(List<LibraryItem> results)
    {
        foreach (var item in results)
        {
            if (item.ItemType == ItemType.Book)
            {
                bookCount++;
            }
            else if (item.ItemType == ItemType.Music)
            {
                musicCount++;
            }
            else if (item.ItemType == ItemType.Movie)
            {
                movieCount++;
            }

            foreach (var innerlist in item.Genres)
            {
                if (innerlist.StartsWith("Fiction"))
                {
                    fictionCount++;
                }
                else if (innerlist.Contains("Science Fiction"))
                {
                    scifiCount++;
                }
                else if (innerlist.Contains("Non-fiction"))
                {
                    nonfictionCount++;
                }
                else if (innerlist.Contains("Fantasy"))
                {
                    fantasyCount++;
                }
                else if (innerlist.Contains("Action"))
                {
                    actionCount++;
                }
                else if (innerlist.Contains("Adventure"))
                {
                    adventureCount++;
                }
                else if (innerlist.Contains("Kids"))
                {
                    childrenCount++;
                }
                else if (innerlist.Contains("Teen"))
                {
                    teenCount++;
                }
                else if (innerlist.Contains("Romance"))
                {
                    romanceCount++;
                }
                else if (innerlist.Contains("Mystery"))
                {
                    mysteryCount++;
                }
                else if (innerlist.Contains("Horror"))
                {
                    horrorCount++;
                }
                else if (innerlist.Contains("Graphic Novel"))
                {
                    graphicNovelCount++;
                }
                else if (innerlist.Contains("Politics"))
                {
                    politicsCount++;
                }
                else if (innerlist.Contains("Religion"))
                {
                    religionCount++;
                }
            }
        }
    }

    void removeItemFromWishlist(LibraryItem item)
    {
        bool a = UserStore.removeFromWishlist(item, User);
        toastService.ShowSuccess("Removed " + item.Title + " from wishlist.");

    }

    void holdItem(LibraryItem item)
    {
        UserStore.addToHold(item, User);
        toastService.ShowSuccess("Placed " + item.Title + " on hold. Please visit the library with two business days to pick up your item.");
    }

    void removeItemFromHold(LibraryItem item)
    {
        UserStore.removeFromHold(item, User);
        toastService.ShowSuccess("Removed " + item.Title + " from on hold.");
    }

    public bool HoldStatus(LibraryItem item)
    {
        if (UserStore.isOnHold(item, User))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool WishlistStatus(LibraryItem item)
    {
        if (UserStore.isInWishlist(item, User))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void addToWishlist(LibraryItem item)
    {
        UserStore.addToWishlist(item, User);
        toastService.ShowSuccess("Added " + item.Title + " to the wishlist.");
    }
}

<style>
    .button-26 {
        background: #00303f;
        border: 1px solid #00303f;
        border-radius: 6px;
        box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
        box-sizing: border-box;
        color: white;
        cursor: pointer;
        display: inline-block;
        font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
        font-size: 16px;
        font-weight: 500;
        line-height: 16px;
        min-height: 40px;
        outline: 0;
        padding: 12px 14px;
        text-align: center;
        text-rendering: geometricprecision;
        text-transform: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
    }

        .button-26:hover,
        .button-26:active {
            background-color: initial;
            background-position: 0 0;
            color: #00303f;
        }

        .button-26:active {
            opacity: .5;
        }
</style>


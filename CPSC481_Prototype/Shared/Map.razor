@using Blazor.Extensions;
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;

<BECanvas Width="@Width" Height="@Height" @ref=_canvas></BECanvas>

@code {
    [Parameter]
    public double Scale { get; set; }

    [Parameter]
    public LibraryItem Item { get; set; }

    public int Width => (int)(1000 * Scale);
    public int Height => (int)(610 * Scale);

    protected BECanvasComponent _canvas;

    private Canvas2DContext _context;

    private int _defaultWidth = 1000;
    private int _defaultHeight = 610;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        List<ItemRenderLocation> renderLocations = new List<ItemRenderLocation>()
        {
            new ItemRenderLocation
            {
                Dewey = 0,
                X = 180,
                y = 30
            },
            new ItemRenderLocation
            {
                Dewey = 100,
                X = 180,
                y = 80
            },
            new ItemRenderLocation
            {
                Dewey = 200,
                X = 180,
                y = 130
            },
            new ItemRenderLocation
            {
                Dewey = 300,
                X = 180,
                y = 180
            },
            new ItemRenderLocation
            {
                Dewey = 400,
                X = 180,
                y = 280
            },
            new ItemRenderLocation
            {
                Dewey = 500,
                X = 180,
                y = 330
            },
             new ItemRenderLocation
            {
                Dewey = 600,
                X = 180,
                y = 430
            },
            new ItemRenderLocation
            {
                Dewey = 700,
                X = 180,
                y = 530
            },
            new ItemRenderLocation
            {
                Dewey = 800,
                X = 460,
                y = 410
            },
            new ItemRenderLocation
            {
                Dewey = 900,
                X = 180,
                y = 580
            },
        };

        this._context = await _canvas.CreateCanvas2DAsync();
        await _context.ClearRectAsync(0, 0, _canvas.Width, _canvas.Height);
        await _context.RestoreAsync();
        await _context.SaveAsync();
        await this._context.SetFontAsync("20px helvetica");

        await _context.ScaleAsync(Scale, Scale);

        await _context.SetFillStyleAsync("#ffffff");
        await _context.FillRectAsync(0, 0, 1000, 610);

        // Kids Section
        await _context.BeginPathAsync();
        await _context.MoveToAsync(600, 610);
        await _context.LineToAsync(600, 300);
        await _context.LineToAsync(1000, 300);
        await _context.StrokeAsync();
        for (int i = 620; i <= 800; i += 50)
        {
            await _context.SetFillStyleAsync("#a4caf1");
            await this._context.FillRectAsync(i, 490, 30, 150);
        }
        for (int i = 320; i <= 450; i += 50)
        {
            int index = (i - 320) / 50;
            switch (index)
            {
                case 0:
                    await _context.SetFillStyleAsync("#ffe5dd");
                    break;
                case 1:
                    await _context.SetFillStyleAsync("#f1d1f4");
                    break;
                case 2:
                    await _context.SetFillStyleAsync("#fefecc");
                    break;
                default:
                    break;
            }
            await this._context.FillRectAsync(900, i, 150, 30);
        }

        // Librarian Desk
        await _context.BeginPathAsync();
        await _context.MoveToAsync(800, 300);
        await _context.LineToAsync(800, 250);
        await _context.LineToAsync(950, 250);
        await _context.LineToAsync(950, 300);
        await _context.StrokeAsync();

        // Bathroom
        await _context.BeginPathAsync();
        await _context.MoveToAsync(250, 0);
        await _context.LineToAsync(250, 150);
        await _context.LineToAsync(575, 150);
        await _context.LineToAsync(575, 0);
        await _context.StrokeAsync();
        await _context.BeginPathAsync();
        await _context.MoveToAsync(412, 0);
        await _context.LineToAsync(412, 150);
        await _context.StrokeAsync();

        await _context.SetFillStyleAsync("black");
        await _context.BeginPathAsync();
        await _context.ArcAsync(325, 50, 12, 0, 2*Math.PI);
        await _context.FillAsync();
        await _context.FillRectAsync(321, 58, 8, 30);

        await _context.BeginPathAsync();
        await _context.ArcAsync(490, 50, 12, 0, 2 * Math.PI);
        await _context.FillAsync();
        await _context.MoveToAsync(490, 50);
        await _context.LineToAsync(500, 88);
        await _context.LineToAsync(480, 88);
        await _context.MoveToAsync(490, 50);
        await _context.FillAsync();

        // Left books
        for(int i = 20; i <= 600; i+=50) {
            int index = (i - 20) / 50;
            switch(index)
            {
                case 0:
                    await _context.SetFillStyleAsync("#ffcbcb");
                    break;
                case 1:
                    await _context.SetFillStyleAsync("#98cb99");
                    break;
                case 2:
                    await _context.SetFillStyleAsync("#fecb99");
                    break;
                case 3:
                    await _context.SetFillStyleAsync("#f7ddfe");
                    break;
                case 4:
                    await _context.SetFillStyleAsync("#f7ddfe");
                    break;
                case 5:
                    await _context.SetFillStyleAsync("#ddf3ff");
                    break;
                case 6:
                    await _context.SetFillStyleAsync("#ffe5dd");
                    break;
                case 7:
                    await _context.SetFillStyleAsync("#ffe5dd");
                    break;
                case 8:
                    await _context.SetFillStyleAsync("#f1d1f4");
                    break;
                case 9:
                    await _context.SetFillStyleAsync("#f1d1f4");
                    break;
                case 10:
                    await _context.SetFillStyleAsync("#bde7d9");
                    break;
                case 11:
                    await _context.SetFillStyleAsync("#fefecc");
                    break;
                default:
                    await _context.SetFillStyleAsync("black");
                    break;
            }
            await this._context.FillRectAsync(0, i, 200, 30);
        }

        // DVDS/Movies
        for (int i = 230; i <= 570; i += 50)
        {
            if(i < 400) {
                await _context.SetFillStyleAsync("#EC688F");
            } 
            else {
                await _context.SetFillStyleAsync("#68ECC5");
            }
            await _context.FillRectAsync(i, 510, 30, 100);
        }

        // Center Books
        await _context.SetFillStyleAsync("#a4caf1");
        for (int i = 230; i <= 570; i += 50)
        {
            await this._context.FillRectAsync(i, 275, 30, 150);
        }

        // Text
        await _context.SetFillStyleAsync("black");
        await _context.FillTextAsync("Kids", 720, 400);
        await _context.FillTextAsync("Quiet Study", 350, 475);
        await _context.FillTextAsync("Washrooms", 350, 175);
        await _context.FillTextAsync("Work Area", 725, 90);
        await _context.FillTextAsync("Librarian Desk", 810, 280);

        // Border
        await _context.BeginPathAsync();
        await _context.MoveToAsync(0, 0);
        await _context.LineToAsync(1000, 0);
        await _context.LineToAsync(1000, 609);
        await _context.LineToAsync(0, 609);
        await _context.LineToAsync(0, 0);
        await _context.StrokeAsync();

        // Doors
        await _context.SetFillStyleAsync("white");
        await this._context.FillRectAsync(980, 100, 40, 50);
        await this._context.FillRectAsync(625, 290, 50, 40);
        await this._context.FillRectAsync(275, 140, 50, 40);
        await this._context.FillRectAsync(500, 140, 50, 40);
        //await this._context.SetFontAsync("48px serif");
        //await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);

        // Item location
        ItemRenderLocation loc = new ItemRenderLocation();
        if (Item.DeweyDecimal >= 0)
        {
            loc = renderLocations.First(l => Item.DeweyDecimal >= l.Dewey && Item.DeweyDecimal < l.Dewey + 100);
        }
        if (Item.IsKids)
        {
            if(Item.DeweyDecimal >= 800 && Item.DeweyDecimal < 900)
            {
                loc = new ItemRenderLocation
                    {
                        X = 640,
                        y = 500
                    };
            }
        }
        if (Item.ItemType == ItemType.Movie)
        {
            loc = new ItemRenderLocation
                {
                    X = 240,
                    y = 510
                };
        }
        if (Item.ItemType == ItemType.Music)
        {
            loc = new ItemRenderLocation
                {
                    X = 440,
                    y = 510
                };
        }


        await _context.SetFillStyleAsync("black");
        await _context.BeginPathAsync();
        await _context.ArcAsync(loc.X, loc.y, 12, 0, 2 * Math.PI);
        await _context.StrokeAsync();
        await _context.SetFillStyleAsync("white");
        await _context.BeginPathAsync();

        await _context.BeginPathAsync();
        await _context.MoveToAsync(loc.X + 12, loc.y);
        await _context.LineToAsync(loc.X + 75, loc.y - 25);
        await _context.StrokeAsync();

        await this._context.FillRectAsync(loc.X + 60, loc.y - 50, Math.Max(100, Item.Title.Length * 12), 50);
        await _context.SetFillStyleAsync("black");
        await this._context.StrokeRectAsync(loc.X + 60, loc.y - 50, Math.Max(100, Item.Title.Length * 12), 50);
        await _context.FillTextAsync(Item.Title, loc.X + 75, loc.y - 30);
        if (Item.DeweyDecimal >= 0)
        {
            await _context.FillTextAsync(Item.DeweyDecimal.ToString(), loc.X + 75, loc.y - 10);
        }
        else
        {
            await _context.FillTextAsync(Item.ItemType == ItemType.Movie ? "Movies" : "Music", loc.X + 75, loc.y - 10);
        }
    }

    class ItemRenderLocation
    {
        public int Dewey { get; set; }
        public int X { get; set; }
        public int y { get; set; }
    }
}

